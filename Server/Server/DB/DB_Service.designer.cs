#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Server.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DB_Service")]
	public partial class DB_ServiceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTDocument(TDocument instance);
    partial void UpdateTDocument(TDocument instance);
    partial void DeleteTDocument(TDocument instance);
    partial void InsertTHistory(THistory instance);
    partial void UpdateTHistory(THistory instance);
    partial void DeleteTHistory(THistory instance);
    partial void InsertTLanguage(TLanguage instance);
    partial void UpdateTLanguage(TLanguage instance);
    partial void DeleteTLanguage(TLanguage instance);
    partial void InsertTPublisher(TPublisher instance);
    partial void UpdateTPublisher(TPublisher instance);
    partial void DeleteTPublisher(TPublisher instance);
    partial void InsertTRole(TRole instance);
    partial void UpdateTRole(TRole instance);
    partial void DeleteTRole(TRole instance);
    partial void InsertTUser(TUser instance);
    partial void UpdateTUser(TUser instance);
    partial void DeleteTUser(TUser instance);
    #endregion
		
		public DB_ServiceDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DB_ServiceConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB_ServiceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_ServiceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_ServiceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_ServiceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TDocument> TDocuments
		{
			get
			{
				return this.GetTable<TDocument>();
			}
		}
		
		public System.Data.Linq.Table<THistory> THistories
		{
			get
			{
				return this.GetTable<THistory>();
			}
		}
		
		public System.Data.Linq.Table<TLanguage> TLanguages
		{
			get
			{
				return this.GetTable<TLanguage>();
			}
		}
		
		public System.Data.Linq.Table<TPublisher> TPublishers
		{
			get
			{
				return this.GetTable<TPublisher>();
			}
		}
		
		public System.Data.Linq.Table<TRole> TRoles
		{
			get
			{
				return this.GetTable<TRole>();
			}
		}
		
		public System.Data.Linq.Table<TUser> TUsers
		{
			get
			{
				return this.GetTable<TUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TDocuments")]
	public partial class TDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Document;
		
		private string _Title;
		
		private string _Description;
		
		private int _ID_Language;
		
		private int _ID_Publisher;
		
		private System.Data.Linq.Binary _Screen;
		
		private string _Tags;
		
		private string _FileName;
		
		private long _FileLength;
		
		private EntitySet<THistory> _THistories;
		
		private EntityRef<TLanguage> _TLanguage;
		
		private EntityRef<TPublisher> _TPublisher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_DocumentChanging(int value);
    partial void OnID_DocumentChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnID_LanguageChanging(int value);
    partial void OnID_LanguageChanged();
    partial void OnID_PublisherChanging(int value);
    partial void OnID_PublisherChanged();
    partial void OnScreenChanging(System.Data.Linq.Binary value);
    partial void OnScreenChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileLengthChanging(long value);
    partial void OnFileLengthChanged();
    #endregion
		
		public TDocument()
		{
			this._THistories = new EntitySet<THistory>(new Action<THistory>(this.attach_THistories), new Action<THistory>(this.detach_THistories));
			this._TLanguage = default(EntityRef<TLanguage>);
			this._TPublisher = default(EntityRef<TPublisher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Document", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_Document
		{
			get
			{
				return this._ID_Document;
			}
			set
			{
				if ((this._ID_Document != value))
				{
					this.OnID_DocumentChanging(value);
					this.SendPropertyChanging();
					this._ID_Document = value;
					this.SendPropertyChanged("ID_Document");
					this.OnID_DocumentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Language", DbType="Int NOT NULL")]
		public int ID_Language
		{
			get
			{
				return this._ID_Language;
			}
			set
			{
				if ((this._ID_Language != value))
				{
					if (this._TLanguage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_LanguageChanging(value);
					this.SendPropertyChanging();
					this._ID_Language = value;
					this.SendPropertyChanged("ID_Language");
					this.OnID_LanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Publisher", DbType="Int NOT NULL")]
		public int ID_Publisher
		{
			get
			{
				return this._ID_Publisher;
			}
			set
			{
				if ((this._ID_Publisher != value))
				{
					if (this._TPublisher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_PublisherChanging(value);
					this.SendPropertyChanging();
					this._ID_Publisher = value;
					this.SendPropertyChanged("ID_Publisher");
					this.OnID_PublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Screen", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Screen
		{
			get
			{
				return this._Screen;
			}
			set
			{
				if ((this._Screen != value))
				{
					this.OnScreenChanging(value);
					this.SendPropertyChanging();
					this._Screen = value;
					this.SendPropertyChanged("Screen");
					this.OnScreenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="VarChar(MAX)")]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileLength", DbType="BigInt NOT NULL")]
		public long FileLength
		{
			get
			{
				return this._FileLength;
			}
			set
			{
				if ((this._FileLength != value))
				{
					this.OnFileLengthChanging(value);
					this.SendPropertyChanging();
					this._FileLength = value;
					this.SendPropertyChanged("FileLength");
					this.OnFileLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TDocument_THistory", Storage="_THistories", ThisKey="ID_Document", OtherKey="ID_Document")]
		public EntitySet<THistory> THistories
		{
			get
			{
				return this._THistories;
			}
			set
			{
				this._THistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TLanguage_TDocument", Storage="_TLanguage", ThisKey="ID_Language", OtherKey="ID_Language", IsForeignKey=true)]
		public TLanguage TLanguage
		{
			get
			{
				return this._TLanguage.Entity;
			}
			set
			{
				TLanguage previousValue = this._TLanguage.Entity;
				if (((previousValue != value) 
							|| (this._TLanguage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TLanguage.Entity = null;
						previousValue.TDocuments.Remove(this);
					}
					this._TLanguage.Entity = value;
					if ((value != null))
					{
						value.TDocuments.Add(this);
						this._ID_Language = value.ID_Language;
					}
					else
					{
						this._ID_Language = default(int);
					}
					this.SendPropertyChanged("TLanguage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TPublisher_TDocument", Storage="_TPublisher", ThisKey="ID_Publisher", OtherKey="ID_Publisher", IsForeignKey=true)]
		public TPublisher TPublisher
		{
			get
			{
				return this._TPublisher.Entity;
			}
			set
			{
				TPublisher previousValue = this._TPublisher.Entity;
				if (((previousValue != value) 
							|| (this._TPublisher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TPublisher.Entity = null;
						previousValue.TDocuments.Remove(this);
					}
					this._TPublisher.Entity = value;
					if ((value != null))
					{
						value.TDocuments.Add(this);
						this._ID_Publisher = value.ID_Publisher;
					}
					else
					{
						this._ID_Publisher = default(int);
					}
					this.SendPropertyChanged("TPublisher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_THistories(THistory entity)
		{
			this.SendPropertyChanging();
			entity.TDocument = this;
		}
		
		private void detach_THistories(THistory entity)
		{
			this.SendPropertyChanging();
			entity.TDocument = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.THistory")]
	public partial class THistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_row;
		
		private string _Email;
		
		private int _ID_Document;
		
		private System.DateTime _Date;
		
		private EntityRef<TDocument> _TDocument;
		
		private EntityRef<TUser> _TUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_rowChanging(int value);
    partial void OnID_rowChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnID_DocumentChanging(int value);
    partial void OnID_DocumentChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public THistory()
		{
			this._TDocument = default(EntityRef<TDocument>);
			this._TUser = default(EntityRef<TUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_row", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_row
		{
			get
			{
				return this._ID_row;
			}
			set
			{
				if ((this._ID_row != value))
				{
					this.OnID_rowChanging(value);
					this.SendPropertyChanging();
					this._ID_row = value;
					this.SendPropertyChanged("ID_row");
					this.OnID_rowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					if (this._TUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Document", DbType="Int NOT NULL")]
		public int ID_Document
		{
			get
			{
				return this._ID_Document;
			}
			set
			{
				if ((this._ID_Document != value))
				{
					if (this._TDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_DocumentChanging(value);
					this.SendPropertyChanging();
					this._ID_Document = value;
					this.SendPropertyChanged("ID_Document");
					this.OnID_DocumentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TDocument_THistory", Storage="_TDocument", ThisKey="ID_Document", OtherKey="ID_Document", IsForeignKey=true)]
		public TDocument TDocument
		{
			get
			{
				return this._TDocument.Entity;
			}
			set
			{
				TDocument previousValue = this._TDocument.Entity;
				if (((previousValue != value) 
							|| (this._TDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TDocument.Entity = null;
						previousValue.THistories.Remove(this);
					}
					this._TDocument.Entity = value;
					if ((value != null))
					{
						value.THistories.Add(this);
						this._ID_Document = value.ID_Document;
					}
					else
					{
						this._ID_Document = default(int);
					}
					this.SendPropertyChanged("TDocument");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TUser_THistory", Storage="_TUser", ThisKey="Email", OtherKey="Email", IsForeignKey=true)]
		public TUser TUser
		{
			get
			{
				return this._TUser.Entity;
			}
			set
			{
				TUser previousValue = this._TUser.Entity;
				if (((previousValue != value) 
							|| (this._TUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TUser.Entity = null;
						previousValue.THistories.Remove(this);
					}
					this._TUser.Entity = value;
					if ((value != null))
					{
						value.THistories.Add(this);
						this._Email = value.Email;
					}
					else
					{
						this._Email = default(string);
					}
					this.SendPropertyChanged("TUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TLanguages")]
	public partial class TLanguage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Language;
		
		private string _Language;
		
		private EntitySet<TDocument> _TDocuments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_LanguageChanging(int value);
    partial void OnID_LanguageChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    #endregion
		
		public TLanguage()
		{
			this._TDocuments = new EntitySet<TDocument>(new Action<TDocument>(this.attach_TDocuments), new Action<TDocument>(this.detach_TDocuments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Language", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_Language
		{
			get
			{
				return this._ID_Language;
			}
			set
			{
				if ((this._ID_Language != value))
				{
					this.OnID_LanguageChanging(value);
					this.SendPropertyChanging();
					this._ID_Language = value;
					this.SendPropertyChanged("ID_Language");
					this.OnID_LanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TLanguage_TDocument", Storage="_TDocuments", ThisKey="ID_Language", OtherKey="ID_Language")]
		public EntitySet<TDocument> TDocuments
		{
			get
			{
				return this._TDocuments;
			}
			set
			{
				this._TDocuments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TDocuments(TDocument entity)
		{
			this.SendPropertyChanging();
			entity.TLanguage = this;
		}
		
		private void detach_TDocuments(TDocument entity)
		{
			this.SendPropertyChanging();
			entity.TLanguage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TPublishers")]
	public partial class TPublisher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Publisher;
		
		private string _Publisher;
		
		private EntitySet<TDocument> _TDocuments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_PublisherChanging(int value);
    partial void OnID_PublisherChanged();
    partial void OnPublisherChanging(string value);
    partial void OnPublisherChanged();
    #endregion
		
		public TPublisher()
		{
			this._TDocuments = new EntitySet<TDocument>(new Action<TDocument>(this.attach_TDocuments), new Action<TDocument>(this.detach_TDocuments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Publisher", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_Publisher
		{
			get
			{
				return this._ID_Publisher;
			}
			set
			{
				if ((this._ID_Publisher != value))
				{
					this.OnID_PublisherChanging(value);
					this.SendPropertyChanging();
					this._ID_Publisher = value;
					this.SendPropertyChanged("ID_Publisher");
					this.OnID_PublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Publisher
		{
			get
			{
				return this._Publisher;
			}
			set
			{
				if ((this._Publisher != value))
				{
					this.OnPublisherChanging(value);
					this.SendPropertyChanging();
					this._Publisher = value;
					this.SendPropertyChanged("Publisher");
					this.OnPublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TPublisher_TDocument", Storage="_TDocuments", ThisKey="ID_Publisher", OtherKey="ID_Publisher")]
		public EntitySet<TDocument> TDocuments
		{
			get
			{
				return this._TDocuments;
			}
			set
			{
				this._TDocuments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TDocuments(TDocument entity)
		{
			this.SendPropertyChanging();
			entity.TPublisher = this;
		}
		
		private void detach_TDocuments(TDocument entity)
		{
			this.SendPropertyChanging();
			entity.TPublisher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TRoles")]
	public partial class TRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Role;
		
		private string _Role;
		
		private EntitySet<TUser> _TUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_RoleChanging(int value);
    partial void OnID_RoleChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public TRole()
		{
			this._TUsers = new EntitySet<TUser>(new Action<TUser>(this.attach_TUsers), new Action<TUser>(this.detach_TUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Role", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_Role
		{
			get
			{
				return this._ID_Role;
			}
			set
			{
				if ((this._ID_Role != value))
				{
					this.OnID_RoleChanging(value);
					this.SendPropertyChanging();
					this._ID_Role = value;
					this.SendPropertyChanged("ID_Role");
					this.OnID_RoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRole_TUser", Storage="_TUsers", ThisKey="ID_Role", OtherKey="ID_Role")]
		public EntitySet<TUser> TUsers
		{
			get
			{
				return this._TUsers;
			}
			set
			{
				this._TUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TUsers(TUser entity)
		{
			this.SendPropertyChanging();
			entity.TRole = this;
		}
		
		private void detach_TUsers(TUser entity)
		{
			this.SendPropertyChanging();
			entity.TRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TUsers")]
	public partial class TUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Email;
		
		private string _Name;
		
		private string _Surname;
		
		private int _ID_Role;
		
		private string _Password;
		
		private EntitySet<THistory> _THistories;
		
		private EntityRef<TRole> _TRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnID_RoleChanging(int value);
    partial void OnID_RoleChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public TUser()
		{
			this._THistories = new EntitySet<THistory>(new Action<THistory>(this.attach_THistories), new Action<THistory>(this.detach_THistories));
			this._TRole = default(EntityRef<TRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Role", DbType="Int NOT NULL")]
		public int ID_Role
		{
			get
			{
				return this._ID_Role;
			}
			set
			{
				if ((this._ID_Role != value))
				{
					if (this._TRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_RoleChanging(value);
					this.SendPropertyChanging();
					this._ID_Role = value;
					this.SendPropertyChanged("ID_Role");
					this.OnID_RoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TUser_THistory", Storage="_THistories", ThisKey="Email", OtherKey="Email")]
		public EntitySet<THistory> THistories
		{
			get
			{
				return this._THistories;
			}
			set
			{
				this._THistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRole_TUser", Storage="_TRole", ThisKey="ID_Role", OtherKey="ID_Role", IsForeignKey=true)]
		public TRole TRole
		{
			get
			{
				return this._TRole.Entity;
			}
			set
			{
				TRole previousValue = this._TRole.Entity;
				if (((previousValue != value) 
							|| (this._TRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TRole.Entity = null;
						previousValue.TUsers.Remove(this);
					}
					this._TRole.Entity = value;
					if ((value != null))
					{
						value.TUsers.Add(this);
						this._ID_Role = value.ID_Role;
					}
					else
					{
						this._ID_Role = default(int);
					}
					this.SendPropertyChanged("TRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_THistories(THistory entity)
		{
			this.SendPropertyChanging();
			entity.TUser = this;
		}
		
		private void detach_THistories(THistory entity)
		{
			this.SendPropertyChanging();
			entity.TUser = null;
		}
	}
}
#pragma warning restore 1591
